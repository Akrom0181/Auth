definitions:
  models.ErrorResponse:
    properties:
      code:
        type: string
      message:
        type: string
    type: object
  models.GetListRoleResponse:
    properties:
      count:
        type: integer
      items:
        items:
          $ref: '#/definitions/models.Role'
        type: array
    type: object
  models.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
      user_type:
        type: string
    type: object
  models.OtpConfirmRequest:
    properties:
      code:
        type: string
      otp_id:
        type: string
    type: object
  models.OtpRequest:
    properties:
      email:
        type: string
    type: object
  models.RegisterRequest:
    properties:
      email:
        type: string
      name:
        type: string
      otp_confirmation_token:
        type: string
      password:
        type: string
    type: object
  models.Role:
    properties:
      created_at:
        type: string
      created_by:
        type: string
      id:
        type: string
      name:
        type: string
      status:
        type: string
    type: object
  models.SuccessResponse:
    properties:
      message:
        type: string
    type: object
  models.SysUser:
    properties:
      created_at:
        type: string
      created_by:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
      password:
        type: string
      roles:
        items:
          type: string
        type: array
      status:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a sample server GO Auth API server.
  title: GO Auth API
  version: "1.0"
paths:
  /auth/confirm-otp:
    post:
      consumes:
      - application/json
      description: Confirm OTP
      parameters:
      - description: OTP Confirmation
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.OtpConfirmRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Confirm OTP
      tags:
      - auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login
      parameters:
      - description: User
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Login
      tags:
      - auth
  /auth/send-otp:
    post:
      consumes:
      - application/json
      description: Send OTP
      parameters:
      - description: User
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.OtpRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Send OTP
      tags:
      - auth
  /auth/signup:
    post:
      consumes:
      - application/json
      description: Signup
      parameters:
      - description: User Registration
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Signup
      tags:
      - auth
  /role:
    post:
      consumes:
      - application/json
      description: Create a new role
      parameters:
      - description: Role
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.Role'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Role'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a role
      tags:
      - role
  /role/{id}:
    get:
      consumes:
      - application/json
      description: Get a single role by ID or name
      parameters:
      - description: Role ID
        in: query
        name: id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Role'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a single role
      tags:
      - role
    put:
      consumes:
      - application/json
      description: Update a role by ID
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: string
      - description: Role
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.Role'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Role'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a role
      tags:
      - role
  /role/list:
    get:
      consumes:
      - application/json
      description: Get all roles
      parameters:
      - description: Search by name
        in: query
        name: search
        type: string
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetListRoleResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all roles
      tags:
      - role
  /sysuser:
    post:
      consumes:
      - application/json
      description: Create a new sysuser
      parameters:
      - description: sysuser
        in: body
        name: sysuser
        required: true
        schema:
          $ref: '#/definitions/models.SysUser'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a sysuser
      tags:
      - sysuser
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
